{"ast":null,"code":"class Api {\n  constructor(baseUrl) {\n    this._baseUrl = baseUrl;\n  }\n  getUserInfo() {\n    const token = localStorage.getItem('jwt');\n    return fetch(`${this._baseUrl}/users/me`, {\n      method: \"GET\",\n      headers: {\n        authorization: `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      }\n    }).then(res => this._checkServer(res));\n  }\n  getCards() {\n    const token = localStorage.getItem('jwt');\n    return fetch(`${this._baseUrl}/cards`, {\n      method: \"GET\",\n      headers: {\n        authorization: `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      }\n    }).then(res => this._checkServer(res));\n  }\n  createCard(data) {\n    const token = localStorage.getItem('jwt');\n    return fetch(`${this._baseUrl}/cards`, {\n      method: \"POST\",\n      headers: {\n        authorization: `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(data)\n    }).then(res => this._checkServer(res));\n  }\n  deleteCard(cardId) {\n    const token = localStorage.getItem('jwt');\n    return fetch(`${this._baseUrl}/cards/${cardId}`, {\n      method: \"DELETE\",\n      headers: {\n        authorization: `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      }\n    }).then(res => this._checkServer(res));\n  }\n  changeUserInfo(data) {\n    const token = localStorage.getItem('jwt');\n    return fetch(`${this._baseUrl}/users/me`, {\n      method: 'PATCH',\n      headers: {\n        authorization: `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        name: data.name,\n        about: data.about\n      })\n    }).then(res => this._checkServer(res));\n  }\n  likeCard(cardId, isLiked) {\n    const token = localStorage.getItem('jwt');\n    return fetch(`${this._baseUrl}/cards/${cardId}/likes`, {\n      method: `${isLiked ? 'PUT' : 'DELETE'}`,\n      headers: {\n        authorization: `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      }\n    }).then(res => this._checkServer(res));\n  }\n  deleteLike(cardId) {\n    const token = localStorage.getItem('jwt');\n    return fetch(`${this._baseUrl}/cards/${cardId}/likes`, {\n      method: \"DELETE\",\n      headers: {\n        authorization: `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      }\n    }).then(res => this._checkServer(res));\n  }\n  changeAvatar(data) {\n    const token = localStorage.getItem('jwt');\n    return fetch(`${this._baseUrl}/users/me/avatar`, {\n      method: 'PATCH',\n      headers: {\n        authorization: `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        avatar: data.avatar\n      })\n    }).then(res => this._checkServer(res));\n  }\n  _checkServer(res) {\n    if (res.ok) {\n      return res.json();\n    }\n    return Promise.reject(`Ошибка: ${res.status}`);\n  }\n}\nexport const api = new Api('https://api.bizit.nomoredomains.rocks');","map":{"version":3,"names":["Api","constructor","baseUrl","_baseUrl","getUserInfo","token","localStorage","getItem","fetch","method","headers","authorization","then","res","_checkServer","getCards","createCard","data","body","JSON","stringify","deleteCard","cardId","changeUserInfo","name","about","likeCard","isLiked","deleteLike","changeAvatar","avatar","ok","json","Promise","reject","status","api"],"sources":["C:/Users/ASUS/dev/diplom/movies-explorer-frontend/src/utils/Api.js"],"sourcesContent":["class Api {\r\n  constructor(baseUrl) {\r\n    this._baseUrl = baseUrl;\r\n  }\r\n\r\n  getUserInfo() {\r\n    const token = localStorage.getItem('jwt');\r\n    return fetch(`${this._baseUrl}/users/me`, {\r\n      method: \"GET\",\r\n      headers: {\r\n        authorization: `Bearer ${token}`,\r\n        'Content-Type': 'application/json',\r\n      }\r\n    })\r\n      .then((res) => this._checkServer(res)) \r\n  }\r\n\r\n  getCards() {\r\n    const token = localStorage.getItem('jwt');\r\n    return fetch(`${this._baseUrl}/cards`, {\r\n      method: \"GET\",\r\n      headers: {\r\n        authorization: `Bearer ${token}`,\r\n        'Content-Type': 'application/json',\r\n      }\r\n    })\r\n      .then((res) => this._checkServer(res))\r\n  }\r\n\r\n  createCard(data) {\r\n    const token = localStorage.getItem('jwt');\r\n    return fetch(`${this._baseUrl}/cards`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        authorization: `Bearer ${token}`,\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(data),\r\n    })\r\n      .then((res) => this._checkServer(res));\r\n  }\r\n\r\n  deleteCard(cardId) {\r\n    const token = localStorage.getItem('jwt');\r\n    return fetch(`${this._baseUrl}/cards/${cardId}`, {\r\n      method: \"DELETE\",\r\n      headers: {\r\n        authorization: `Bearer ${token}`,\r\n        'Content-Type': 'application/json',\r\n      }\r\n    })\r\n      .then((res) => this._checkServer(res));\r\n  }\r\n\r\n  changeUserInfo(data) {\r\n    const token = localStorage.getItem('jwt');\r\n    return fetch(`${this._baseUrl}/users/me`, {\r\n      method: 'PATCH',\r\n      headers: {\r\n        authorization: `Bearer ${token}`,\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({\r\n        name: data.name,\r\n        about: data.about,\r\n      })\r\n    })\r\n      .then((res) => this._checkServer(res))\r\n  }\r\n\r\n  likeCard(cardId, isLiked) {\r\n    const token = localStorage.getItem('jwt');\r\n    return fetch(`${this._baseUrl}/cards/${cardId}/likes`, {\r\n      method: `${isLiked ? 'PUT' : 'DELETE'}`,\r\n      headers: {\r\n        authorization: `Bearer ${token}`,\r\n        'Content-Type': 'application/json',\r\n      }\r\n    })\r\n      .then((res) => this._checkServer(res));\r\n  }\r\n\r\n  deleteLike(cardId) {\r\n    const token = localStorage.getItem('jwt');\r\n    return fetch(`${this._baseUrl}/cards/${cardId}/likes`, {\r\n      method: \"DELETE\",\r\n      headers: {\r\n        authorization: `Bearer ${token}`,\r\n        'Content-Type': 'application/json',\r\n      }\r\n    })\r\n      .then((res) => this._checkServer(res));\r\n  }\r\n\r\n  changeAvatar(data) {\r\n    const token = localStorage.getItem('jwt');\r\n    return fetch(`${this._baseUrl}/users/me/avatar`, {\r\n      method: 'PATCH',\r\n      headers: {\r\n        authorization: `Bearer ${token}`,\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({\r\n        avatar: data.avatar,\r\n      })\r\n    })\r\n      .then((res) => this._checkServer(res));\r\n  }\r\n\r\n  _checkServer(res) {\r\n    if (res.ok) {\r\n      return res.json();\r\n    }\r\n    return Promise.reject(`Ошибка: ${res.status}`);\r\n  }\r\n\r\n}\r\n\r\nexport const api = new Api('https://api.bizit.nomoredomains.rocks');"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}