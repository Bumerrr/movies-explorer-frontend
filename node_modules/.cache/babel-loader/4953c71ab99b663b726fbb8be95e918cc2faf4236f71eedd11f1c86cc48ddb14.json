{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ASUS\\\\dev\\\\diplom\\\\movies-explorer-frontend\\\\src\\\\components\\\\App\\\\App.js\",\n  _s = $RefreshSig$();\nimport Header from '../Header/Header';\nimport Main from '../Main/Main';\nimport Movies from '../Movies/Movies';\nimport SavedMovies from '../SavedMovies/SavedMovies';\nimport NotFound from '../NotFound/NotFound';\nimport Profile from '../Profile/Profile';\n// import Footer from './Footer';\nimport EditPopup from '../EditPopup/EditPopup';\n// import AddPopup from './AddPopup';\n// import AvatarPopup from './AvatarPopup';\n// import DeletePopup from './DeletePopup';\nimport { useState } from 'react';\nimport './App.css';\n// import ImagePopup from './ImagePopup';\nimport { CurrentUserContext } from '../../contexts/CurrentUserContext';\n// import { api } from '../../utils/Api';\nimport Login from '../Login/Login';\nimport Register from '../Register/Register';\nimport { Route, Switch, Redirect, useHistory } from 'react-router-dom';\n// import { useHistory } from 'react-router-dom';\nimport ProtectedRoute from '../ProtectedRoute/ProtectedRoute';\n// import InfoTooltip from './InfoTooltip';\n// import authApi from '../../utils/authApi';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  // const [cards, setCards] = useState([]);\n  //  const [isEditProfilePopupOpen, setIsEditProfilePopupOpen] = useState(false);\n  //  const [isAddPlacePopupOpen, setIsAddPlacePopupOpen] = useState(false);\n  //  const [isEditAvatarPopupOpen, setIsEditAvatarPopupOpen] = useState(false);\n  //  const [isInfoTooltipPopupOpen, setIsInfoTooltipPopupOpen] = useState(false);\n  //  const [selectedCard, setSelectedCard] = useState({ name: '', link: '' });\n  //  const [isImagePopupOpen, setImagePopupOpen] = useState(false);\n  //  const [isDeletePopupOpen, setDeleteCardPopupOpen] = useState(false);\n  const [currentUser, setCurrentUser] = useState({});\n  //  const [isInfoTooltipSuccess, setIsInfoTooltipSuccess] = useState(false);\n  const [isProfileEmail, setIsProfileEmail] = useState('');\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const historyUse = useHistory();\n\n  //  useEffect(() => {\n  //     api.getUserInfo()\n  //        .then((res) => {\n  //           setCurrentUser(res)\n  //        })\n  //        .catch((err) => console.log(err))\n  //  }, []);\n\n  //  function handleCardClick(card) {\n  //     setImagePopupOpen(true);\n  //     setSelectedCard(card);\n  //  }\n\n  //  function handleCardDeleteClick(card) {\n  //     setDeleteCardPopupOpen(true);\n  //     setSelectedCard(card);\n  //  }\n\n  //  function handleEditProfileClick() {\n  //     setIsEditProfilePopupOpen(true);\n  //  }\n\n  //  function handleAddPlaceClick() {\n  //     setIsAddPlacePopupOpen(true);\n  //  }\n\n  //  function handleEditAvatarClick() {\n  //     setIsEditAvatarPopupOpen(true);\n  //  }\n\n  //  function closeAllPopups() {\n  //     setIsEditProfilePopupOpen(false);\n  //     setIsAddPlacePopupOpen(false);\n  //     setIsEditAvatarPopupOpen(false);\n  //     setImagePopupOpen(false);\n  //     setIsInfoTooltipPopupOpen(false);\n  //     setDeleteCardPopupOpen(false);\n  //     setSelectedCard({});\n  //  }\n\n  //  function handleUpdateUser(res) {\n  //     api.changeUserInfo(res)\n  //        .then((res) => {\n  //           console.log(res)\n  //           setCurrentUser(res);\n  //           closeAllPopups();\n  //        })\n  //        .catch((err) => console.log(err));\n  //  }\n\n  //  function handleUpdateAvatar(res) {\n  //     api.changeAvatar(res)\n  //        .then((res) => {\n  //           console.log(res)\n  //           setCurrentUser(res);\n  //           closeAllPopups();\n  //        })\n  //        .catch((err) => console.log(err));\n  //  }\n\n  //  function handleCardLike(card) {\n  //     const isLiked = card.likes.some((i) => i._id === currentUser._id);\n  //     if (!isLiked) {\n  //        api.likeCard(card._id, !isLiked)\n  //           .then((newCard) => {\n  //              setCards((state) =>\n  //                 state.map((c) => (c._id === card._id ? newCard : c))\n  //              );\n  //           })\n  //           .catch((err) => console.log(err));\n  //     } else {\n  //        api.deleteLike(card._id, !isLiked)\n  //           .then((newCard) => {\n  //              setCards((state) =>\n  //                 state.map((c) => (c._id === card._id ? newCard : c))\n  //              );\n  //           })\n  //           .catch((err) => console.log(err));\n  //     }\n  //  }\n\n  //  function handleCardDelete(card) {\n  //     api\n  //       .deleteCard(card._id)\n  //       .then((newCard) => {\n  //         const newCards = cards.filter((c) =>c._id === card._id ? \"\" : newCard\n  //         );\n  //         setCards(newCards);\n  //         closeAllPopups();\n  //       })\n  //       .catch((err) => console.log(err));\n  //   }\n\n  //  useEffect(() => {\n  //     api.getCards()\n  //        .then((res) => {\n  //           setCards(res)\n  //        })\n  //        .catch((err) => {\n  //           console.log(err)\n  //        })\n  //  }, []);\n\n  //  function handleAddPlaceSubmit(res) {\n  //     api.createCard(res)\n  //        .then((res) => {\n  //           setCards([res, ...cards]);\n  //           closeAllPopups();\n  //        })\n  //        .catch((err) => console.log(err));\n  //  }\n\n  //  useEffect(() => {\n  //     const jwt = localStorage.getItem('jwt');\n  //     if (jwt) {\n  //        authApi.checkToken()\n  //           .then(data => {\n  //              if (data) {\n  //                 setIsProfileEmail(data.email)\n  //                 setIsLoggedIn(true)\n  //                 historyUse.push('/');\n  //                 console.log(\"Вы уже авторизованы, рады вас видеть снова\")\n  //              }\n  //           })\n  //           .catch(error => { console.log(error) })\n  //     }\n  //  }, [historyUse, isLoggedIn]);\n\n  //  function handleLoginUser(email, password) {\n  //     authApi.loginUser(email, password)\n  //        .then(data => {\n  //           if (data.token) {\n  //              setIsProfileEmail(email)\n  //              setIsLoggedIn(true);\n  //              localStorage.setItem('jwt', data.token);\n  //              historyUse.push('/');\n  //           }\n  //        })\n  //        .catch(error => {\n  //           setIsInfoTooltipPopupOpen(true);\n  //           setIsInfoTooltipSuccess(false);\n  //           console.log(error)\n  //        })\n  //  }\n\n  //  function handleRegisterUser(email, password) {\n  //     authApi.registerUser(email, password)\n  //        .then(data => {\n  //           if (data) {\n  //              setIsInfoTooltipSuccess(true);\n  //              historyUse.push('/sign-in');\n  //           }\n  //        })\n  //        .catch(error => {\n  //           setIsInfoTooltipSuccess(false);\n  //           console.log(error);\n  //        })\n  //        .finally(\n  //           () =>\n  //              setIsInfoTooltipPopupOpen(true)\n  //        );\n  //  }\n\n  // const handleLogout = () => {\n  //    localStorage.removeItem('jwt');\n  //    setIsProfileEmail('')\n  //    setIsLoggedIn(false);\n  //    historyUse.push('/sign-in');\n  // }\n\n  return /*#__PURE__*/_jsxDEV(CurrentUserContext.Provider, {\n    value: currentUser,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"page\",\n      children: /*#__PURE__*/_jsxDEV(Switch, {\n        children: [/*#__PURE__*/_jsxDEV(Route, {\n          path: \"/\",\n          exact: true,\n          children: /*#__PURE__*/_jsxDEV(Main, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 216,\n            columnNumber: 19\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 16\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/sign-up\",\n          children: /*#__PURE__*/_jsxDEV(Register\n          // onRegister={handleRegisterUser}\n          , {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 219,\n            columnNumber: 19\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 218,\n          columnNumber: 16\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/sign-in\",\n          children: /*#__PURE__*/_jsxDEV(Login\n          // onLogin={handleLoginUser}\n          , {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 224,\n            columnNumber: 19\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 223,\n          columnNumber: 16\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 10\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 212,\n    columnNumber: 7\n  }, this);\n}\n_s(App, \"GlJpDQz6/A3mIPAiF2/NGCWeWA8=\", false, function () {\n  return [useHistory];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Header","Main","Movies","SavedMovies","NotFound","Profile","EditPopup","useState","CurrentUserContext","Login","Register","Route","Switch","Redirect","useHistory","ProtectedRoute","jsxDEV","_jsxDEV","App","_s","currentUser","setCurrentUser","isProfileEmail","setIsProfileEmail","isLoggedIn","setIsLoggedIn","historyUse","Provider","value","children","className","path","exact","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/ASUS/dev/diplom/movies-explorer-frontend/src/components/App/App.js"],"sourcesContent":["import Header from '../Header/Header';\nimport Main from '../Main/Main';\nimport Movies from '../Movies/Movies';\nimport SavedMovies from '../SavedMovies/SavedMovies';\nimport NotFound from '../NotFound/NotFound';\nimport Profile from '../Profile/Profile';\n// import Footer from './Footer';\nimport EditPopup from '../EditPopup/EditPopup';\n// import AddPopup from './AddPopup';\n// import AvatarPopup from './AvatarPopup';\n// import DeletePopup from './DeletePopup';\nimport { useState } from 'react';\nimport './App.css';\n// import ImagePopup from './ImagePopup';\nimport { CurrentUserContext } from '../../contexts/CurrentUserContext';\n// import { api } from '../../utils/Api';\nimport Login from '../Login/Login';\nimport Register from '../Register/Register';\nimport { Route, Switch, Redirect, useHistory } from 'react-router-dom';\n// import { useHistory } from 'react-router-dom';\nimport ProtectedRoute from '../ProtectedRoute/ProtectedRoute';\n// import InfoTooltip from './InfoTooltip';\n// import authApi from '../../utils/authApi';\n\nfunction App() {\n   // const [cards, setCards] = useState([]);\n   //  const [isEditProfilePopupOpen, setIsEditProfilePopupOpen] = useState(false);\n   //  const [isAddPlacePopupOpen, setIsAddPlacePopupOpen] = useState(false);\n   //  const [isEditAvatarPopupOpen, setIsEditAvatarPopupOpen] = useState(false);\n   //  const [isInfoTooltipPopupOpen, setIsInfoTooltipPopupOpen] = useState(false);\n   //  const [selectedCard, setSelectedCard] = useState({ name: '', link: '' });\n   //  const [isImagePopupOpen, setImagePopupOpen] = useState(false);\n   //  const [isDeletePopupOpen, setDeleteCardPopupOpen] = useState(false);\n   const [currentUser, setCurrentUser] = useState({});\n   //  const [isInfoTooltipSuccess, setIsInfoTooltipSuccess] = useState(false);\n   const [isProfileEmail, setIsProfileEmail] = useState('')\n   const [isLoggedIn, setIsLoggedIn] = useState(false);\n\n   const historyUse = useHistory();\n\n   //  useEffect(() => {\n   //     api.getUserInfo()\n   //        .then((res) => {\n   //           setCurrentUser(res)\n   //        })\n   //        .catch((err) => console.log(err))\n   //  }, []);\n\n   //  function handleCardClick(card) {\n   //     setImagePopupOpen(true);\n   //     setSelectedCard(card);\n   //  }\n\n   //  function handleCardDeleteClick(card) {\n   //     setDeleteCardPopupOpen(true);\n   //     setSelectedCard(card);\n   //  }\n\n   //  function handleEditProfileClick() {\n   //     setIsEditProfilePopupOpen(true);\n   //  }\n\n   //  function handleAddPlaceClick() {\n   //     setIsAddPlacePopupOpen(true);\n   //  }\n\n   //  function handleEditAvatarClick() {\n   //     setIsEditAvatarPopupOpen(true);\n   //  }\n\n   //  function closeAllPopups() {\n   //     setIsEditProfilePopupOpen(false);\n   //     setIsAddPlacePopupOpen(false);\n   //     setIsEditAvatarPopupOpen(false);\n   //     setImagePopupOpen(false);\n   //     setIsInfoTooltipPopupOpen(false);\n   //     setDeleteCardPopupOpen(false);\n   //     setSelectedCard({});\n   //  }\n\n   //  function handleUpdateUser(res) {\n   //     api.changeUserInfo(res)\n   //        .then((res) => {\n   //           console.log(res)\n   //           setCurrentUser(res);\n   //           closeAllPopups();\n   //        })\n   //        .catch((err) => console.log(err));\n   //  }\n\n   //  function handleUpdateAvatar(res) {\n   //     api.changeAvatar(res)\n   //        .then((res) => {\n   //           console.log(res)\n   //           setCurrentUser(res);\n   //           closeAllPopups();\n   //        })\n   //        .catch((err) => console.log(err));\n   //  }\n\n   //  function handleCardLike(card) {\n   //     const isLiked = card.likes.some((i) => i._id === currentUser._id);\n   //     if (!isLiked) {\n   //        api.likeCard(card._id, !isLiked)\n   //           .then((newCard) => {\n   //              setCards((state) =>\n   //                 state.map((c) => (c._id === card._id ? newCard : c))\n   //              );\n   //           })\n   //           .catch((err) => console.log(err));\n   //     } else {\n   //        api.deleteLike(card._id, !isLiked)\n   //           .then((newCard) => {\n   //              setCards((state) =>\n   //                 state.map((c) => (c._id === card._id ? newCard : c))\n   //              );\n   //           })\n   //           .catch((err) => console.log(err));\n   //     }\n   //  }\n\n   //  function handleCardDelete(card) {\n   //     api\n   //       .deleteCard(card._id)\n   //       .then((newCard) => {\n   //         const newCards = cards.filter((c) =>c._id === card._id ? \"\" : newCard\n   //         );\n   //         setCards(newCards);\n   //         closeAllPopups();\n   //       })\n   //       .catch((err) => console.log(err));\n   //   }\n\n   //  useEffect(() => {\n   //     api.getCards()\n   //        .then((res) => {\n   //           setCards(res)\n   //        })\n   //        .catch((err) => {\n   //           console.log(err)\n   //        })\n   //  }, []);\n\n   //  function handleAddPlaceSubmit(res) {\n   //     api.createCard(res)\n   //        .then((res) => {\n   //           setCards([res, ...cards]);\n   //           closeAllPopups();\n   //        })\n   //        .catch((err) => console.log(err));\n   //  }\n\n   //  useEffect(() => {\n   //     const jwt = localStorage.getItem('jwt');\n   //     if (jwt) {\n   //        authApi.checkToken()\n   //           .then(data => {\n   //              if (data) {\n   //                 setIsProfileEmail(data.email)\n   //                 setIsLoggedIn(true)\n   //                 historyUse.push('/');\n   //                 console.log(\"Вы уже авторизованы, рады вас видеть снова\")\n   //              }\n   //           })\n   //           .catch(error => { console.log(error) })\n   //     }\n   //  }, [historyUse, isLoggedIn]);\n\n   //  function handleLoginUser(email, password) {\n   //     authApi.loginUser(email, password)\n   //        .then(data => {\n   //           if (data.token) {\n   //              setIsProfileEmail(email)\n   //              setIsLoggedIn(true);\n   //              localStorage.setItem('jwt', data.token);\n   //              historyUse.push('/');\n   //           }\n   //        })\n   //        .catch(error => {\n   //           setIsInfoTooltipPopupOpen(true);\n   //           setIsInfoTooltipSuccess(false);\n   //           console.log(error)\n   //        })\n   //  }\n\n   //  function handleRegisterUser(email, password) {\n   //     authApi.registerUser(email, password)\n   //        .then(data => {\n   //           if (data) {\n   //              setIsInfoTooltipSuccess(true);\n   //              historyUse.push('/sign-in');\n   //           }\n   //        })\n   //        .catch(error => {\n   //           setIsInfoTooltipSuccess(false);\n   //           console.log(error);\n   //        })\n   //        .finally(\n   //           () =>\n   //              setIsInfoTooltipPopupOpen(true)\n   //        );\n   //  }\n\n   // const handleLogout = () => {\n   //    localStorage.removeItem('jwt');\n   //    setIsProfileEmail('')\n   //    setIsLoggedIn(false);\n   //    historyUse.push('/sign-in');\n   // }\n\n   return (\n      <CurrentUserContext.Provider value={currentUser}>\n         <div className=\"page\">\n            <Switch>\n               <Route path='/' exact>\n                  <Main />\n               </Route>\n               <Route path=\"/sign-up\">\n                  <Register\n                  // onRegister={handleRegisterUser}\n                  />\n               </Route>\n               <Route path=\"/sign-in\">\n                  <Login\n                  // onLogin={handleLoginUser}\n                  />\n               </Route>\n               {/* <ProtectedRoute exact path=\"/movies\" \n               // isLoginned={loggedIn}\n               >\n                  <Movies\n                     // onCreateMovie={handlerCreateMovie}\n                     // onDeleteMovie={handlerDeleteMovie}\n                     // externalMovies={externalMovies}\n                     // setExternalMovies={setExternalMovies}\n                     // myMovies={myMovies}\n                     // setMyMovies={setMyMovies}\n                     // getExternalMovies={getExternalMovies}\n                     // getMyMovies={getMyMovies}\n                  />\n               </ProtectedRoute>\n\n               <ProtectedRoute exact path=\"/saved-movies\" \n               // isLoginned={loggedIn}\n               >\n                  <SavedMovies\n                     // onDeleteMovie={handlerDeleteMovie}\n                     // myMovies={myMovies}\n                     // setMyMovies={setMyMovies}\n                     // getMyMovies={getMyMovies}\n                  />\n               </ProtectedRoute>\n\n               <ProtectedRoute exact path=\"/profile\" \n               // isLoginned={loggedIn}\n               >\n                  <Profile \n                  // logOut={logOut} onUpdateUser={handleUpdateUser} \n                  />\n               </ProtectedRoute>\n\n               <Route path=\"*\">\n                  <NotFound />\n               </Route> */}\n            </Switch>\n         </div>\n      </CurrentUserContext.Provider >\n   );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}